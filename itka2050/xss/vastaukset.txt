
1:  > MikÃ¤ on suositeltu tapa tehdÃ¤ tuottaa HTML:Ã¤Ã¤?

TylsÃ¤nÃ¤ kÃ¤sittelen Flaskia. Yleisesti kÃ¤ytetÃ¤Ã¤n Jinja[2] template -jÃ¤rjestelmÃ¤Ã¤, johon tehdÃ¤Ã¤n templateihin, joihin merkataan
Jinjan omalla syntaxilla placeholderit ohjelmallisesti tuotetulle sisÃ¤llÃ¶lle. Laittamalla autoescapen pÃ¤Ã¤lle, voi automaagisesti pyrkiÃ¤ - mutta siihen ei pidÃ¤ luottaa kuten dokumentaatiossa sanotaan, vaan se tietÃ¤Ã¤ milloin kÃ¤yttÃ¤jÃ¤ on jo filtterÃ¶inyt sisÃ¤llÃ¶n - tukkimaan pahimpia mogia.

2:  > Onko mahdollista tehdÃ¤ HTML:Ã¤Ã¤ liimaamalla merkkijonoja yhteen?

On. Flask itsessÃ¤Ã¤n vÃ¤litÃ¤ miten vastaus generoidaan, joten palautettava `response` voi sisÃ¤ltÃ¤Ã¤ vaikka liimattuja merkkijonoja:

    >>> from flask import make_response, request
    >>> 
    >>> def spam():
    >>>     not_so_safe = request.form.get("ham")
    >>>     return make_response('<input name="ham" value="'+not_so_safe+'" />' )

3:  > MillÃ¤ tavoin kÃ¤yttÃ¤jÃ¤n syÃ¶tettÃ¤ pitÃ¤Ã¤ kÃ¤sitellÃ¤, jotta sen voi turvallisesti sijoittaa HTML:n sekaan? (esim. enkoodaus, sanitiointi yms)

Poistamalla kielletyt - tai ennemmin vain sallien - merkkijonot. KÃ¤ytÃ¤nnÃ¶ssÃ¤ kuitenkin kÃ¤ytetÃ¤Ã¤n escape filttereitÃ¤ templaten sisÃ¤llÃ¤:

    >>> <input name="ham" value="{{not_so_safe|escape}}" />
    >>> <script>var muuttuja = {{not_so_safe|string|tojson}};</script>

Jollei ole vÃ¤lttÃ¤mÃ¤ttÃ¤ halunnut kÃ¤yttÃ¤Ã¤ muuta kuin utf-8 merkistÃ¶Ã¤, ei tarvitse encodingista uudemmilla alustoilla huolehtia. Jos haluaa, on in the world of hurt muutenkin.

4:  > Sanitoiko tyÃ¶kalusi syÃ¶tteen eri tavalla jos se on HTML:n attribuutissa kuin jos se on HTML:n leipÃ¤tekstissÃ¤? PitÃ¤Ã¤kÃ¶ kÃ¤yttÃ¤jÃ¤n ilmaista itse kumpaa koodausta missÃ¤kin tilanteessa tarvitsee kÃ¤yttÃ¤Ã¤?

Ei, ja ei. Moderneille selaimille entityt kuten ``&lt;`` ja ``&#34;`` ei haittaa html:n attribuutin sisÃ¤llÃ¤. Taas, jos haluaa olla ovela, pitÃ¤Ã¤ tietÃ¤Ã¤ mitÃ¤ haluaa.

    >>>
    >>> render_form("spam.html", not_so_safe=r"""</template>\n<noscript><p title="></noscript><img src=x onerror=alert(ðŸ¦„)></p></noscript>">""" )

spam.html::
    >>> <input type="text" value="{{not_so_safe|e}}">
    >>> Sanoit: {{not_so_safe|e}}
    >>> <script>var ham = {{not_so_safe|tojson|safe}};</script>
